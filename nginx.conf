# In NGINX, key : value pairs are called directives

# Contexts - A few top-level directives, referred to as contexts, group together the directives that apply to different traffic types

# - events - General connection processing
# - http - HTTP traffic
# - mail - mail traffic
# - stream - TCP and UDP traffic

# Directives placed outside of those contexts are said to be in the **main** context.

worker_processes 1; ## Controls how many parallel processes NGINX spawns to handle client requests each worker process runs independently and can handle its own set of connections. Should be tuned according to the server's hardware (CPU cores) and expected traffic load.
# In production, is generally recommended to set the worker_processes value to be equal to the number of CPU cores that is available on the server that NGINX is running.


# worker_processes auto; Uncomment this one to let NGINX automatically detect the number of CPU cores available on the server and start a corresponding number of worker nodes.

events {
	# how many simultaneous connections can be opened by each worker process, it increases memory usage
	  # The actual simultaneous connections cannot exceed the current limit on the max number of open files
	worker_connections 1024;
}

http {
	#it is important to tell NGINX to include the MIME types in the "content-type" response header
	# it helps the client understand how to process or render the file
	include mime.types;

	# upstream block defines a group of backend servers that will handle requests forwarded by NGINX
	upstream nodejs_cluster {
		least_conn; # request is sent to the server with the least number of active connections
		server 127.0.0.1:3000;
		server 127.0.0.1:3001;
		server 127.0.0.1:3002;
	}
	# server block - defines how to handle requests for a particular domain or IP addr
	server {
		# the ip addr and port on which the server will accept requests;
		listen 8080;
		# domain or IP addr this server block should respond to
		server_name localhost;
		# the root (/) URL, will apply to all requests unless more specific location blocks are defined
		location / {
			# Tells NGINX to pass the request to another server, acting as reverse proxy
			proxy_pass http://nodejs_cluster;
			# we want to forward info from the original client request to the backend server
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			#proxy_set_header User-Agent $http_user_agent;
			#proxy_set_header Cookie $http_cookie;
			#proxy_set_header Authorization $http_authorization;
			#proxy_set_header X-Custom-Header "MyAppSpecificValue";
		}
	}
}
